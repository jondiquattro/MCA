levels(data$YearContract) <- data$Contract
data$OneYearContract <- data$Contract
levels(data$OneYearContract)
levels(data$OneYearContract)[1] = 0
levels(data$OneYearContract)[2] = 1
levels(data$OneYearContract)[3] = 0
write.csv("data.csv")
write.csv(data, "data.csv")
levels(data$Contract)
data$TwoYearContrac <- data$Contract
levels(data$TwoYearContrac)
levels(data$TwoYearContrac)[1] = 0
levels(data$TwoYearContrac)[2] = 0
levels(data$TwoYearContrac)[3] = 1
write.csv(data, "data.csv")
levels(data$TwoYearContrac)
levels(data$TwoYearContrac)[3] = 0
levels(data$TwoYearContrac)
levels(data$TwoYearContrac)[2] =1
levels(data$FiberOptic)
levels(data$FiberOptic)[2] = 1
levels(data$PaymentMethod)
data$PaymentBankTransfer <-data$PaymentMethod
levels(data$PaymentBankTransfer)
levels(data$PaymentBankTransfer)[1] = 1
levels(data$PaymentBankTransfer)[4] = 0
levels(data$PaymentBankTransfer)
levels(data$PaymentBankTransfer)[3] = 0
levels(data$PaymentBankTransfer)
levels(data$PaymentBankTransfer)[2] = 0
levels(data$PaymentBankTransfer)
data$PaymentCreditCard <-data$PaymentMethod
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[1] = 0
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[2] = 1
levels(data$PaymentCreditCard)
write.csv(data, "data.csv")
levels(data$MultipleLines)
levels(data$MultipleLines)[1] = 0
levels(data$MultipleLines)
levels(data$MultipleLines) [2] = 0
levels(data$MultipleLines)
levels(data$MultipleLines)[2] = 1
write.csv(data, "data.csv")
data$PaymentCreditCard = data$PaymentMethod
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[1] = 0
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[2] = 1
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[3] = 0
levels(data$PaymentCreditCard)
levels(data$PaymentCreditCard)[3] = 0
levels(data$PaymentCreditCard)
write.csv(data, "data.csv")
clean <- read.csv("~/R-Labs/datamining2/data.csv")
View(clean)
hist(data$gender)
hist(data$tenure)
hist(data$PhoneService)
#to get square
CrossTable(x = data$PhoneService,y=data$Churn)
#to get square
install.packages(“gmodels”)
#to get squre
install.packages("gmodels")
load(gmodels)
library(gmodels)
CrossTable(x = data$PhoneService,y=data$Churn)
CrossTable(x = data$PhoneService,y=data$Churn chisq = TRUE)
CrossTable(x = data$PhoneService,y=data$Churn chisq = TRUE)
CrossTable(x = data$PhoneService,y=data$Churn, chisq = TRUE)
hist(tenure)
hist(data$tenure)
CrossTable(x = data$gender,y=data$Churn, chisq = TRUE)
CrossTable(x = data$,y=data$SeniorCitizen, chisq = TRUE)
CrossTable(x = data$SeniorCitizen, chisq = TRUE)
CrossTable(x = data$SeniorCitizen, chisq = TRUE)
CrossTable(x = data$PhoneService,y=data$Churn, chisq = TRUE)
CrossTable(x = data$SeniorCitizen,y=data$Churn, chisq = TRUE)
CrossTable(x = data$Partner,y=data$Churn, chisq = TRUE)
hist(data$Partner)
levels(data$Partner)
CrossTable(x = data$Partner,y=data$Churn, chisq = TRUE)
levels(data$Dependents)
CrossTable(x = data$Dependents,y=data$Churn, chisq = TRUE)
chi<-CrossTable(x = data$Dependents,y=data$Churn, chisq = TRUE)
chi
chi$chisq
df <- data # data
for (i in colnames(df)){
print(class(df[[i]]))
}
df <- data # data
for (i in colnames(df)){
print(df[[i]])
}
data[[1]]
data[[2]]
chi$chisq
for (i in colnames(data)){
chi <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
print(chi$chisq)
}
chi
for (i in colnames(data)){
chi <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
print(chi$data)
}
chiVal = ''
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiVal=chis$data
}
chiVal
chiVal = ''
df = subset(data, select = c(gender,partner))
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiVal=chis$data
}
chiVal
chi<-CrossTable(x = data$Dependents,y=data$Churn, chisq = TRUE)
chi$data
chisq
chi
chi$chisq
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiVal=chis$dchisq
print(chiVal)
}
chiVal
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiVal=chis$chisq
print(chiVal)
}
chiVal
num = 1
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiVal[num]=chis$dchisq
num = num +1
}
chiVal
View(chiVal)
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
gfg <- append(chiVal, chis$chisq)
}
chiVal
View(chiVal)
chiList <-list()
num = 1
for (i in colnames(data)){
# chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
num = num +1
print(n)
}
num = 1
for (i in colnames(data)){
# chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
num = num +1
print(n)
}
num = 1
for (i in colnames(data)){
# chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
num = num +1
print(num)
}
num = 1
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq
num = num +1
}
chiVal
View(chiVal)
chiVal[1]
chiVal[2]
chiVal[3]
chiVal[4]
chiVal[5]
chiVal[6]
View(chiList)
chis
chis$chisq
chis$chisq[3]
chis$chisq[2]
chis
chis$chisq[1]
chis$chisq.corr
chis$chisq.corr[3]
chis$chisq.corr[2]
chis$chisq.corr[1]
num = 1
for (i in colnames(data)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr[3]
num = num +1
}
View(chiList)
View(data)
View(data)
chiList <-list()
df = subset(data, select = -c(gender,partner))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr[3]
num = num +1
}
chiList <-list()
View(chiVal)
View(chiVal)
View(chiVal)
View(chi)
chiList <-list()
df = subset(data, select = -c(gender,partner))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr[3]
num = num +1
}
View(chiList)
View(chi)
View(chis)
chiList <-list()
df = subset(data, select = -c(gender,partner))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
chiList <-list()
df = subset(data, select = c(gender,partner))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
View(chiList)
df = subset(data, select = c(gender,partner))
df
df = data[c("gender")]
df
df = data[c("gender", "partner")]
df = data[c("gender", "partner")]
View(data)
df = data[c("gender", "partner")]
df = data[c("partner")]
df = data[c("gender")]
df = data[c("gender", "Partner")]
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
df = data[c("gender", "Partner")]
df
df<-c()
chiList <-list()
df = data[c("gender", "Partner")]
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
View(data)
df = subset(data, select = -c(data$customerID) )
df = subset(data, select = -c(data$customerID) )
df
View(df)
df = subset(data, select = -c(customerID) )
df
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod) )
df
View(df)
#loop through each column
chiList <-list()
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
#loop through each column
chiList <-list()
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
View(df)
#loop through each column
chiList <-list()
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod, data$Churn))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
print(chiList)
View(df)
chiList <-list()
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod,Churn))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
plot(chiList)
plot(c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1),chiList)
plot(c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1),chiList)
x <- c(0,2)
y <- c(1,2)
plot(x,y)
arrows(x[1],y[1],x[2],y[2])
cars <- c(1, 3, 6, 4, 9)
# Graph the cars vector with all defaults
plot(cars)
plot(chiList)
View(df)
View(chiVal)
View(chiList)
chiList[1]
chiList[[1]]
chiList[[1:5]]
chiList[1:5]
for(c in chiList){
print(c)
}
cl <-c()
for(c in chiList){
print(c)
append(cl,c)
}
cl <-c()
for(c in chiList){
print(c)
append(cl,c)
}
cl
chiList[1]
chiList[[1]]
for(c in length(chiList)){
print(c)
c[c]<-chiList[[c]]
}
cl <-c()
for(c in length(chiList)){
print(c)
c[c]<-chiList[[c]]
}
cl
cl <-c()
for(c in 1:length(chiList)){
print(c)
c[c]<-chiList[[c]]
}
cl
cl <-c()
for(c in 1:length(chiList)){
print(c)
cl[c]<-chiList[[c]]
}
cl
plot(cl)
df
chiList <-list()
df = subset(data, select = -c(customerID,TotalCharges,tenure,MonthlyCharges,Contract,PaymentMethod,Churn))
num = 1
for (i in colnames(df)){
chis <- CrossTable(x = df[[i]],y=data$Churn, chisq = TRUE)
chiList[num] <- chis$chisq.corr$p.value
num = num +1
}
chiList
1<cl[21]
cl[21]
plot(cl)
cl <-c()
for(c in 1:length(chiList)){
print(c)
cl[c]<-round(chiList[[c]],digits=2)
}
cl <-c()
for(c in 1:length(chiList)){
print(round(chiList[[c]],digits=2))
cl[c]<-round(chiList[[c]],digits=2)
}
cl <-c()
for(c in 1:length(chiList)){
print(chiList[[c]])
cl[c]<-round(chiList[[c]],digits=2)
}
View(data)
require(caret)
require(plyr)
require(car)
require(dplyr)
require(reshape2)
theme_set(theme_bw(12))
## recode selected observations
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
churn$InternetService <- as.factor(mapvalues(churn$InternetService,
from=c("Fiber optic"),
to=c("Fiberoptic")))
churn$PaymentMethod <- as.factor(mapvalues(churn$PaymentMethod,
from=c("Credit card (automatic)","Electronic check","Mailed check",
"Bank transfer (automatic)"),
to=c("Creditcard","Electronicheck","Mailedcheck","Banktransfer")))
churn$Contract <- as.factor(mapvalues(churn$Contract,
from=c("Month-to-month",
"Two year", "One year"),
to=c("MtM","TwoYr", "OneYr")))
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn <- WA_Fn.UseC_.Telco.Customer.Churn
## recode selected observations
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
churn$InternetService <- as.factor(mapvalues(churn$InternetService,
from=c("Fiber optic"),
to=c("Fiberoptic")))
churn$PaymentMethod <- as.factor(mapvalues(churn$PaymentMethod,
from=c("Credit card (automatic)","Electronic check","Mailed check",
"Bank transfer (automatic)"),
to=c("Creditcard","Electronicheck","Mailedcheck","Banktransfer")))
churn$Contract <- as.factor(mapvalues(churn$Contract,
from=c("Month-to-month",
"Two year", "One year"),
to=c("MtM","TwoYr", "OneYr")))
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
cols_drop <- c(1, 20)
churn <- churn[,-cols_drop]
churn$tenure <- as.factor(car::recode(churn$tenure, "1:9 = 'ShortTenure';
9:29 = 'MediumTenure'; else = 'LongTenure'"))
churn$MonthlyCharges <- as.factor(car::recode(churn$MonthlyCharges, "1:35 = 'LowCharge';35:70 = 'MediumCharge'; else = 'HighCharge'"))
require(FactoMineR)
require(factoextra)
res.mca <- MCA(training, quali.sup=c(17,19), graph=FALSE)
fviz_mca_var(res.mca, repel=TRUE)
require(factoextra)
# Install
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/survminer")
res.mca <- MCA(training, quali.sup=c(17,19), graph=FALSE)
fviz_mca_var(res.mca, repel=TRUE)
res.mca <- MCA(training, quali.sup=c(17,19), graph=FALSE)
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
## set random seed to make reproducible results
set.seed(324)
training <- churn[inTrain,]
testing <- churn[-inTrain,]
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
require(car)
load("caret")
install(caret)
install("caret")
install.packages('caret', dependencies = TRUE)
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
install(caret)
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(churn$Churn, p=0.7, list=FALSE)
search()
res.mca <- MCA(training, quali.sup=c(17,19), graph=FALSE)
res.mca <- MCA(churn$Churn, quali.sup=c(17,19), graph=FALSE)
dim(churn$Churn)
churn$Churn
res.mca <- MCA(churn, quali.sup=c(17,19), graph=FALSE)
fviz_mca_var(res.mca, repel=TRUE)
res.mca <- MCA(churn, quali.sup=c(17,19), graph=FALSE)
fviz_mca_var(res.mca, repel=TRUE)
library("factoextra")
install.packages("factoextra")
library("factoextra")
fviz_mca_var(res.mca, repel=TRUE)
search()
